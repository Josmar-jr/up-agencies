// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid())
  name         String
  email        String  @unique
  passwordHash String  @map("password_hash")
  avatarUrl    String? @map("avatar_url")
  phone        String

  token       Token[]
  invite      Invite[]
  member_on   Member[]
  owns_agency Agency[]

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

enum Role {
  ADMIN
  MEMBER
  BILLING
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String? @map("user_id")

  agency   Agency @relation(fields: [agencyId], references: [id])
  agencyId String @map("agency_id")

  @@unique([email, agencyId])
  @@index([email])
  @@map("invites")
}

model Member {
  id String @id @default(uuid())

  role     Role   @default(MEMBER)
  agency   Agency @relation(fields: [agencyId], references: [id])
  agencyId String @map("agency_id")
  user     User   @relation(fields: [userId], references: [id])
  userId   String @map("user_id")

  @@unique([agencyId, userId])
  @@map("members")
}

model Agency {
  id        String   @id @default(uuid())
  name      String
  email     String
  cnpj      String   @unique
  site      String?
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?  @map("address_id")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  invites Invite[]
  members Member[]
  people  Person[]

  @@map("agencies")
}

model Address {
  id           String   @id @default(uuid())
  cep          String
  state        String
  city         String
  neighborhood String
  street       String
  number       Int
  complement   String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  agencies Agency[]
  peolple  Person[]

  @@map("address")
}

enum Gender {
  MALE
  FEMALE
}

model Person {
  id        String  @id @default(uuid())
  addressId String? @map("address_id")
  agencyId  String  @map("agency_id")

  name                           String
  birthday                       DateTime?
  gender                         Gender?
  ticketQuoteCount               Int       @default(0) @map("ticket_quote_count")
  ticketQuoteApproved            Int       @default(0) @map("ticket_quote_approved")
  document                       String?
  phone                          String?
  email                          String?
  generalRegistration            String?   @map("general_registration")
  generalRegistrationIssuingBody String?   @map("general_registration_issuing_body")
  passport                       String?
  passportIssuedAt               DateTime? @map("passport_issued_at")
  passportExpiresIn              DateTime? @map("passport_expires_in")
  visa                           String?
  visaExpiresIn                  DateTime? @map("visa_expires_in")
  observation                    String?
  rate                           Int?

  address Address? @relation(fields: [addressId], references: [id])
  agency  Agency   @relation(fields: [agencyId], references: [id])

  @@unique([email, agencyId])
  @@map("people")
}
